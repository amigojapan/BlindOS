#!./lua/mac64bit/bin/lua
-- Copyright 2014 Usmar A. Padow (amigojapan) usmpadow@gmail.com
-- BlindOE (the operation environment, should offer something like the bash shell for blind people)
-- settings
pathToSpeachSynth = "~/Downloads/espeak-1.45.04-OSX/espeak-1.45.04/speak"
parametersToSpeachSynth=""
--end settings
function speakAndPrint(output)
	print(output)
	os.execute(pathToSpeachSynth .. " " .. parametersToSpeachSynth ..  " \"" .. output .."\"")
end
function split_by_space(str)
	local arr = {}
	local index=1
	for i in string.gmatch(str, "%S+") do
		arr[index]=i
		index=index+1
	end
	return arr
end
function os.capture(cmd, raw)
  local f = assert(io.popen(cmd, 'r'))
  local s = assert(f:read('*a'))
  f:close()
  if raw then return s end
  s = string.gsub(s, '^%s+', '')
  s = string.gsub(s, '%s+$', '')
  s = string.gsub(s, '[\n\r]+', ' ')
  return s
end
function file_exists(name)
   local f=io.open(name,"r")
   if f~=nil then io.close(f) return true else return false end
end
function parameters(commands_line_arr,command_length)
	local params=""
	for i, word in ipairs(command_line_arr) do
		if(i>command_length) then 
			params = params .. " " .. word
		end
	end
	return params
end
--main
speakAndPrint("Weolcome to Blind OS")
quit=false
while quit==false do
	speakAndPrint("Enter command:")
	local command_input = io.read()
	speakAndPrint("Command entered: " .. command_input .."")
	speakAndPrint("Execute? Y for Yes N for No:")
	local answer = string.lower(io.read())
	if(answer=="y") then
		command_line_arr = split_by_space(command_input)
		if(command_line_arr[1]=="say") then
			local phrase=parameters(commands_line_arr,1)
			speakAndPrint(phrase)
		elseif(command_line_arr[1]=="run" and command_line_arr[2]=="external") then
			local command_line=parameters(commands_line_arr,2)
			local output = os.capture(command_line,true)
			speakAndPrint(output)
		elseif(command_line_arr[1]=="calculate") then
			formula=parameters(commands_line_arr,1)
			local result = loadstring("return " .. formula)()--eval
			speakAndPrint(formula .. " is equal to " .. result)
		elseif(command_line_arr[1]=="help") then
			speakAndPrint("help for Blind EV, commands follow:")
			speakAndPrint("say phrase, will say a phrase.")
			speakAndPrint("run external command, will run the command you specify on the host operating system.")
			speakAndPrint("calculate formula, will calculate the formula and tell you the result")
		elseif(command_input=="quit") then
			speakAndPrint("Goodbye!")
			break
		end
	end
end
--if(not file_exists("settingsfile")) then
--	speakAndPrint("Fist time settings")
--end
--local f = assert(io.open("settingsfile", "r"))